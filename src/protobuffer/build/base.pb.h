// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef PROTOBUF_INCLUDED_base_2eproto
#define PROTOBUF_INCLUDED_base_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_base_2eproto 

namespace protobuf_base_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_base_2eproto
namespace Base {
class Duck;
class DuckDefaultTypeInternal;
extern DuckDefaultTypeInternal _Duck_default_instance_;
class Hello;
class HelloDefaultTypeInternal;
extern HelloDefaultTypeInternal _Hello_default_instance_;
class Welcome;
class WelcomeDefaultTypeInternal;
extern WelcomeDefaultTypeInternal _Welcome_default_instance_;
}  // namespace Base
namespace google {
namespace protobuf {
template<> ::Base::Duck* Arena::CreateMaybeMessage<::Base::Duck>(Arena*);
template<> ::Base::Hello* Arena::CreateMaybeMessage<::Base::Hello>(Arena*);
template<> ::Base::Welcome* Arena::CreateMaybeMessage<::Base::Welcome>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Base {

// ===================================================================

class Welcome : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Base.Welcome) */ {
 public:
  Welcome();
  virtual ~Welcome();

  Welcome(const Welcome& from);

  inline Welcome& operator=(const Welcome& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Welcome(Welcome&& from) noexcept
    : Welcome() {
    *this = ::std::move(from);
  }

  inline Welcome& operator=(Welcome&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Welcome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Welcome* internal_default_instance() {
    return reinterpret_cast<const Welcome*>(
               &_Welcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Welcome* other);
  friend void swap(Welcome& a, Welcome& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Welcome* New() const final {
    return CreateMaybeMessage<Welcome>(NULL);
  }

  Welcome* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Welcome>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Welcome& from);
  void MergeFrom(const Welcome& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Welcome* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:Base.Welcome)
 private:
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Base.Hello) */ {
 public:
  Hello();
  virtual ~Hello();

  Hello(const Hello& from);

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hello(Hello&& from) noexcept
    : Hello() {
    *this = ::std::move(from);
  }

  inline Hello& operator=(Hello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hello* internal_default_instance() {
    return reinterpret_cast<const Hello*>(
               &_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Hello* other);
  friend void swap(Hello& a, Hello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hello* New() const final {
    return CreateMaybeMessage<Hello>(NULL);
  }

  Hello* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hello>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickname = 1;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // required string uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:Base.Hello)
 private:
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_nickname();
  void clear_has_nickname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Duck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Base.Duck) */ {
 public:
  Duck();
  virtual ~Duck();

  Duck(const Duck& from);

  inline Duck& operator=(const Duck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Duck(Duck&& from) noexcept
    : Duck() {
    *this = ::std::move(from);
  }

  inline Duck& operator=(Duck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Duck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Duck* internal_default_instance() {
    return reinterpret_cast<const Duck*>(
               &_Duck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Duck* other);
  friend void swap(Duck& a, Duck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Duck* New() const final {
    return CreateMaybeMessage<Duck>(NULL);
  }

  Duck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Duck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Duck& from);
  void MergeFrom(const Duck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Duck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sound = 1;
  bool has_sound() const;
  void clear_sound();
  static const int kSoundFieldNumber = 1;
  const ::std::string& sound() const;
  void set_sound(const ::std::string& value);
  #if LANG_CXX11
  void set_sound(::std::string&& value);
  #endif
  void set_sound(const char* value);
  void set_sound(const char* value, size_t size);
  ::std::string* mutable_sound();
  ::std::string* release_sound();
  void set_allocated_sound(::std::string* sound);

  // @@protoc_insertion_point(class_scope:Base.Duck)
 private:
  void set_has_sound();
  void clear_has_sound();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sound_;
  friend struct ::protobuf_base_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Welcome

// required string uuid = 1;
inline bool Welcome::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Welcome::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Welcome::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Welcome::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& Welcome::uuid() const {
  // @@protoc_insertion_point(field_get:Base.Welcome.uuid)
  return uuid_.GetNoArena();
}
inline void Welcome::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Base.Welcome.uuid)
}
#if LANG_CXX11
inline void Welcome::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Base.Welcome.uuid)
}
#endif
inline void Welcome::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Base.Welcome.uuid)
}
inline void Welcome::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Base.Welcome.uuid)
}
inline ::std::string* Welcome::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:Base.Welcome.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Welcome::release_uuid() {
  // @@protoc_insertion_point(field_release:Base.Welcome.uuid)
  if (!has_uuid()) {
    return NULL;
  }
  clear_has_uuid();
  return uuid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Welcome::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Base.Welcome.uuid)
}

// -------------------------------------------------------------------

// Hello

// required string uuid = 2;
inline bool Hello::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hello::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hello::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hello::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& Hello::uuid() const {
  // @@protoc_insertion_point(field_get:Base.Hello.uuid)
  return uuid_.GetNoArena();
}
inline void Hello::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Base.Hello.uuid)
}
#if LANG_CXX11
inline void Hello::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Base.Hello.uuid)
}
#endif
inline void Hello::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Base.Hello.uuid)
}
inline void Hello::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Base.Hello.uuid)
}
inline ::std::string* Hello::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:Base.Hello.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_uuid() {
  // @@protoc_insertion_point(field_release:Base.Hello.uuid)
  if (!has_uuid()) {
    return NULL;
  }
  clear_has_uuid();
  return uuid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Base.Hello.uuid)
}

// required string nickname = 1;
inline bool Hello::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hello::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hello::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hello::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& Hello::nickname() const {
  // @@protoc_insertion_point(field_get:Base.Hello.nickname)
  return nickname_.GetNoArena();
}
inline void Hello::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Base.Hello.nickname)
}
#if LANG_CXX11
inline void Hello::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Base.Hello.nickname)
}
#endif
inline void Hello::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Base.Hello.nickname)
}
inline void Hello::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Base.Hello.nickname)
}
inline ::std::string* Hello::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:Base.Hello.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_nickname() {
  // @@protoc_insertion_point(field_release:Base.Hello.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:Base.Hello.nickname)
}

// -------------------------------------------------------------------

// Duck

// required string sound = 1;
inline bool Duck::has_sound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Duck::set_has_sound() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Duck::clear_has_sound() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Duck::clear_sound() {
  sound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sound();
}
inline const ::std::string& Duck::sound() const {
  // @@protoc_insertion_point(field_get:Base.Duck.sound)
  return sound_.GetNoArena();
}
inline void Duck::set_sound(const ::std::string& value) {
  set_has_sound();
  sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Base.Duck.sound)
}
#if LANG_CXX11
inline void Duck::set_sound(::std::string&& value) {
  set_has_sound();
  sound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Base.Duck.sound)
}
#endif
inline void Duck::set_sound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sound();
  sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Base.Duck.sound)
}
inline void Duck::set_sound(const char* value, size_t size) {
  set_has_sound();
  sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Base.Duck.sound)
}
inline ::std::string* Duck::mutable_sound() {
  set_has_sound();
  // @@protoc_insertion_point(field_mutable:Base.Duck.sound)
  return sound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Duck::release_sound() {
  // @@protoc_insertion_point(field_release:Base.Duck.sound)
  if (!has_sound()) {
    return NULL;
  }
  clear_has_sound();
  return sound_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Duck::set_allocated_sound(::std::string* sound) {
  if (sound != NULL) {
    set_has_sound();
  } else {
    clear_has_sound();
  }
  sound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sound);
  // @@protoc_insertion_point(field_set_allocated:Base.Duck.sound)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Base

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_base_2eproto
